@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both; // Both means clear the both float left and float right.
  }
}

@mixin absCenter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}


// Media Query Manager
/*
  Approach : Desktop first:
  ------------------------

  0-600px     :-  Phones
  600-900px   :-  Tablet Portrait Mode Devices
  900-1200px  :-  Tablet Landscape Mode Devices
  1200-1800px :-  Desktops [** Normal Style Applies]
  1800px +    :-  Big Desktops
 */

@mixin respond-phone {
  @media (max-width: 600px) {
    @content // This '@content' allows us to pass content to this mixin.
  }
}
@mixin respond-tab-port {
  @media (max-width: 900px) {
    @content // This '@content' allows us to pass content to this mixin.
  }
}

/*
 Instated of creating one by one for each of the screen size break points as above
 (i.e respond-phone, respond-tab-port etc), We can write a single mixin as follow
 to accept the screen size as an argument then handle the passed contents based on that
 value.


 For the media quarries we use "em", because some browsers "rem" does not work well.

 1em = 16px
 i.e: 600/16 = 37.5em

 STYLE CHANGE ORDER:
  base + typography --> general layout + grid --> page layout --> components

 $breakpoint [phone, tab-port, tab-land, big-desktop ]
 */
@mixin respond($breakpoint) {

  @if $breakpoint == phone {

    @media (max-width: 37.5em) { // 600px
      @content // This '@content' allows us to pass content to this mixin.
    }
  }

  @if $breakpoint == tab-port {
    @media (max-width: 56.25em) { // 900px
      @content // This '@content' allows us to pass content to this mixin.
    }
  }

  @if $breakpoint == tab-land {
    @media (max-width: 75em) { // 1200px
      @content // This '@content' allows us to pass content to this mixin.
    }
  }

  // For screens larger than 1800px
  //@if($breakpoint == 'big-desktop') { This also works and correct.
  @if $breakpoint == big-desktop {
    @media (min-width: 112.5em) { // 1800px
      @content // This '@content' allows us to pass content to this mixin.
    }
  }
}